// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "admin_protocol.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ttc {
namespace agent {

namespace {

const ::google::protobuf::Descriptor* AddCacheServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCacheServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddModuleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddModuleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeCacheServerAddrRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeCacheServerAddrRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveCacheServerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveCacheServerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveModuleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveModuleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReloadConfigRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReloadConfigRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLatestConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLatestConfigure_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatestConfigureReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatestConfigureReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateConfigure_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateConfigureReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateConfigureReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPushReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPushReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAgentStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAgentStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAgentStatusReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAgentStatusReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwitchHotbakRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwitchHotbakRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_admin_5fprotocol_2eproto() {
  protobuf_AddDesc_admin_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "admin_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  AddCacheServerRequest_descriptor_ = file->message_type(0);
  static const int AddCacheServerRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, virtual_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, hotbak_addr_),
  };
  AddCacheServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCacheServerRequest_descriptor_,
      AddCacheServerRequest::default_instance_,
      AddCacheServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCacheServerRequest));
  AddModuleRequest_descriptor_ = file->message_type(1);
  static const int AddModuleRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddModuleRequest, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddModuleRequest, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddModuleRequest, accesstoken_),
  };
  AddModuleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddModuleRequest_descriptor_,
      AddModuleRequest::default_instance_,
      AddModuleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddModuleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddModuleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddModuleRequest));
  ChangeCacheServerAddrRequest_descriptor_ = file->message_type(2);
  static const int ChangeCacheServerAddrRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCacheServerAddrRequest, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCacheServerAddrRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCacheServerAddrRequest, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCacheServerAddrRequest, hotbak_addr_),
  };
  ChangeCacheServerAddrRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeCacheServerAddrRequest_descriptor_,
      ChangeCacheServerAddrRequest::default_instance_,
      ChangeCacheServerAddrRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCacheServerAddrRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCacheServerAddrRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeCacheServerAddrRequest));
  RemoveCacheServerRequest_descriptor_ = file->message_type(3);
  static const int RemoveCacheServerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheServerRequest, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheServerRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheServerRequest, virtual_node_),
  };
  RemoveCacheServerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveCacheServerRequest_descriptor_,
      RemoveCacheServerRequest::default_instance_,
      RemoveCacheServerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheServerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheServerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveCacheServerRequest));
  RemoveModuleRequest_descriptor_ = file->message_type(4);
  static const int RemoveModuleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveModuleRequest, module_),
  };
  RemoveModuleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveModuleRequest_descriptor_,
      RemoveModuleRequest::default_instance_,
      RemoveModuleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveModuleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveModuleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveModuleRequest));
  ReloadConfigRequest_descriptor_ = file->message_type(5);
  static const int ReloadConfigRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReloadConfigRequest, config_),
  };
  ReloadConfigRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReloadConfigRequest_descriptor_,
      ReloadConfigRequest::default_instance_,
      ReloadConfigRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReloadConfigRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReloadConfigRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReloadConfigRequest));
  Reply_descriptor_ = file->message_type(6);
  static const int Reply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, msg_),
  };
  Reply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reply));
  HeartBeat_descriptor_ = file->message_type(7);
  static const int HeartBeat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, configure_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, configure_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, agent_id_),
  };
  HeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeat));
  HeartBeatReply_descriptor_ = file->message_type(8);
  static const int HeartBeatReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReply, latest_configure_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReply, latest_configure_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReply, push_),
  };
  HeartBeatReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatReply_descriptor_,
      HeartBeatReply::default_instance_,
      HeartBeatReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatReply));
  GetLatestConfigure_descriptor_ = file->message_type(9);
  static const int GetLatestConfigure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestConfigure, configure_version_),
  };
  GetLatestConfigure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLatestConfigure_descriptor_,
      GetLatestConfigure::default_instance_,
      GetLatestConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestConfigure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestConfigure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLatestConfigure));
  LatestConfigureReply_descriptor_ = file->message_type(10);
  static const int LatestConfigureReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestConfigureReply, configure_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestConfigureReply, configure_),
  };
  LatestConfigureReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LatestConfigureReply_descriptor_,
      LatestConfigureReply::default_instance_,
      LatestConfigureReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestConfigureReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatestConfigureReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LatestConfigureReply));
  UpdateConfigure_descriptor_ = file->message_type(11);
  static const int UpdateConfigure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigure, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigure, configure_cksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigure, configure_),
  };
  UpdateConfigure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateConfigure_descriptor_,
      UpdateConfigure::default_instance_,
      UpdateConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateConfigure));
  UpdateConfigureReply_descriptor_ = file->message_type(12);
  static const int UpdateConfigureReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigureReply, ok_),
  };
  UpdateConfigureReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateConfigureReply_descriptor_,
      UpdateConfigureReply::default_instance_,
      UpdateConfigureReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigureReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateConfigureReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateConfigureReply));
  SetPush_descriptor_ = file->message_type(13);
  static const int SetPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPush, push_),
  };
  SetPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPush_descriptor_,
      SetPush::default_instance_,
      SetPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPush));
  SetPushReply_descriptor_ = file->message_type(14);
  static const int SetPushReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPushReply, ok_),
  };
  SetPushReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPushReply_descriptor_,
      SetPushReply::default_instance_,
      SetPushReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPushReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPushReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPushReply));
  QueryAgentStatus_descriptor_ = file->message_type(15);
  static const int QueryAgentStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatus, id_),
  };
  QueryAgentStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAgentStatus_descriptor_,
      QueryAgentStatus::default_instance_,
      QueryAgentStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAgentStatus));
  QueryAgentStatusReply_descriptor_ = file->message_type(16);
  static const int QueryAgentStatusReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatusReply, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatusReply, dbtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatusReply, lmtime_),
  };
  QueryAgentStatusReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAgentStatusReply_descriptor_,
      QueryAgentStatusReply::default_instance_,
      QueryAgentStatusReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatusReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAgentStatusReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAgentStatusReply));
  SwitchCell_descriptor_ = file->message_type(17);
  static const int SwitchCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchCell, businessid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchCell, name_),
  };
  SwitchCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchCell_descriptor_,
      SwitchCell::default_instance_,
      SwitchCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchCell));
  SwitchHotbakRequest_descriptor_ = file->message_type(18);
  static const int SwitchHotbakRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchHotbakRequest, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchHotbakRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchHotbakRequest, data_),
  };
  SwitchHotbakRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SwitchHotbakRequest_descriptor_,
      SwitchHotbakRequest::default_instance_,
      SwitchHotbakRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchHotbakRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwitchHotbakRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SwitchHotbakRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_admin_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCacheServerRequest_descriptor_, &AddCacheServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddModuleRequest_descriptor_, &AddModuleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeCacheServerAddrRequest_descriptor_, &ChangeCacheServerAddrRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveCacheServerRequest_descriptor_, &RemoveCacheServerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveModuleRequest_descriptor_, &RemoveModuleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReloadConfigRequest_descriptor_, &ReloadConfigRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatReply_descriptor_, &HeartBeatReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLatestConfigure_descriptor_, &GetLatestConfigure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LatestConfigureReply_descriptor_, &LatestConfigureReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateConfigure_descriptor_, &UpdateConfigure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateConfigureReply_descriptor_, &UpdateConfigureReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPush_descriptor_, &SetPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPushReply_descriptor_, &SetPushReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAgentStatus_descriptor_, &QueryAgentStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAgentStatusReply_descriptor_, &QueryAgentStatusReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchCell_descriptor_, &SwitchCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SwitchHotbakRequest_descriptor_, &SwitchHotbakRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_admin_5fprotocol_2eproto() {
  delete AddCacheServerRequest::default_instance_;
  delete AddCacheServerRequest_reflection_;
  delete AddModuleRequest::default_instance_;
  delete AddModuleRequest_reflection_;
  delete ChangeCacheServerAddrRequest::default_instance_;
  delete ChangeCacheServerAddrRequest_reflection_;
  delete RemoveCacheServerRequest::default_instance_;
  delete RemoveCacheServerRequest_reflection_;
  delete RemoveModuleRequest::default_instance_;
  delete RemoveModuleRequest_reflection_;
  delete ReloadConfigRequest::default_instance_;
  delete ReloadConfigRequest_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete HeartBeatReply::default_instance_;
  delete HeartBeatReply_reflection_;
  delete GetLatestConfigure::default_instance_;
  delete GetLatestConfigure_reflection_;
  delete LatestConfigureReply::default_instance_;
  delete LatestConfigureReply_reflection_;
  delete UpdateConfigure::default_instance_;
  delete UpdateConfigure_reflection_;
  delete UpdateConfigureReply::default_instance_;
  delete UpdateConfigureReply_reflection_;
  delete SetPush::default_instance_;
  delete SetPush_reflection_;
  delete SetPushReply::default_instance_;
  delete SetPushReply_reflection_;
  delete QueryAgentStatus::default_instance_;
  delete QueryAgentStatus_reflection_;
  delete QueryAgentStatusReply::default_instance_;
  delete QueryAgentStatusReply_reflection_;
  delete SwitchCell::default_instance_;
  delete SwitchCell_reflection_;
  delete SwitchHotbakRequest::default_instance_;
  delete SwitchHotbakRequest_reflection_;
}

void protobuf_AddDesc_admin_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024admin_protocol.proto\022\tttc.agent\"\206\001\n\025Ad"
    "dCacheServerRequest\022\016\n\006module\030\001 \002(\005\022\022\n\ni"
    "nstanceid\030\002 \002(\005\022\014\n\004name\030\003 \002(\t\022\014\n\004addr\030\004 "
    "\002(\t\022\030\n\014virtual_node\030\005 \001(\005:\002-1\022\023\n\013hotbak_"
    "addr\030\006 \002(\t\"E\n\020AddModuleRequest\022\016\n\006module"
    "\030\001 \002(\005\022\014\n\004addr\030\002 \002(\t\022\023\n\013accesstoken\030\003 \002("
    "\t\"_\n\034ChangeCacheServerAddrRequest\022\016\n\006mod"
    "ule\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004addr\030\003 \002(\t\022\023\n"
    "\013hotbak_addr\030\004 \002(\t\"R\n\030RemoveCacheServerR"
    "equest\022\016\n\006module\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\030\n\014"
    "virtual_node\030\003 \001(\005:\002-1\"%\n\023RemoveModuleRe"
    "quest\022\016\n\006module\030\001 \002(\005\"%\n\023ReloadConfigReq"
    "uest\022\016\n\006config\030\001 \002(\t\"$\n\005Reply\022\016\n\006status\030"
    "\001 \002(\005\022\013\n\003msg\030\002 \002(\t\"`\n\tHeartBeat\022\017\n\007versi"
    "on\030\001 \002(\t\022\031\n\021configure_version\030\002 \002(\005\022\025\n\rc"
    "onfigure_md5\030\003 \002(\t\022\020\n\010agent_id\030\004 \002(\005\"e\n\016"
    "HeartBeatReply\022 \n\030latest_configure_versi"
    "on\030\001 \002(\005\022\034\n\024latest_configure_md5\030\002 \002(\t\022\023"
    "\n\004push\030\003 \001(\010:\005false\"/\n\022GetLatestConfigur"
    "e\022\031\n\021configure_version\030\001 \001(\005\"D\n\024LatestCo"
    "nfigureReply\022\031\n\021configure_version\030\001 \002(\005\022"
    "\021\n\tconfigure\030\002 \002(\t\"N\n\017UpdateConfigure\022\017\n"
    "\007version\030\001 \002(\005\022\027\n\017configure_cksum\030\002 \002(\t\022"
    "\021\n\tconfigure\030\003 \002(\t\"\"\n\024UpdateConfigureRep"
    "ly\022\n\n\002ok\030\001 \002(\005\"\027\n\007SetPush\022\014\n\004push\030\001 \002(\005\""
    "\032\n\014SetPushReply\022\n\n\002ok\030\001 \002(\005\"\036\n\020QueryAgen"
    "tStatus\022\n\n\002id\030\001 \002(\005\"C\n\025QueryAgentStatusR"
    "eply\022\n\n\002id\030\001 \002(\005\022\016\n\006dbtime\030\002 \002(\005\022\016\n\006lmti"
    "me\030\003 \002(\005\".\n\nSwitchCell\022\022\n\nbusinessid\030\001 \002"
    "(\005\022\014\n\004name\030\002 \002(\t\"W\n\023SwitchHotbakRequest\022"
    "\014\n\004mode\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\022#\n\004data\030\003 \003"
    "(\0132\025.ttc.agent.SwitchCell", 1265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "admin_protocol.proto", &protobuf_RegisterTypes);
  AddCacheServerRequest::default_instance_ = new AddCacheServerRequest();
  AddModuleRequest::default_instance_ = new AddModuleRequest();
  ChangeCacheServerAddrRequest::default_instance_ = new ChangeCacheServerAddrRequest();
  RemoveCacheServerRequest::default_instance_ = new RemoveCacheServerRequest();
  RemoveModuleRequest::default_instance_ = new RemoveModuleRequest();
  ReloadConfigRequest::default_instance_ = new ReloadConfigRequest();
  Reply::default_instance_ = new Reply();
  HeartBeat::default_instance_ = new HeartBeat();
  HeartBeatReply::default_instance_ = new HeartBeatReply();
  GetLatestConfigure::default_instance_ = new GetLatestConfigure();
  LatestConfigureReply::default_instance_ = new LatestConfigureReply();
  UpdateConfigure::default_instance_ = new UpdateConfigure();
  UpdateConfigureReply::default_instance_ = new UpdateConfigureReply();
  SetPush::default_instance_ = new SetPush();
  SetPushReply::default_instance_ = new SetPushReply();
  QueryAgentStatus::default_instance_ = new QueryAgentStatus();
  QueryAgentStatusReply::default_instance_ = new QueryAgentStatusReply();
  SwitchCell::default_instance_ = new SwitchCell();
  SwitchHotbakRequest::default_instance_ = new SwitchHotbakRequest();
  AddCacheServerRequest::default_instance_->InitAsDefaultInstance();
  AddModuleRequest::default_instance_->InitAsDefaultInstance();
  ChangeCacheServerAddrRequest::default_instance_->InitAsDefaultInstance();
  RemoveCacheServerRequest::default_instance_->InitAsDefaultInstance();
  RemoveModuleRequest::default_instance_->InitAsDefaultInstance();
  ReloadConfigRequest::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  HeartBeatReply::default_instance_->InitAsDefaultInstance();
  GetLatestConfigure::default_instance_->InitAsDefaultInstance();
  LatestConfigureReply::default_instance_->InitAsDefaultInstance();
  UpdateConfigure::default_instance_->InitAsDefaultInstance();
  UpdateConfigureReply::default_instance_->InitAsDefaultInstance();
  SetPush::default_instance_->InitAsDefaultInstance();
  SetPushReply::default_instance_->InitAsDefaultInstance();
  QueryAgentStatus::default_instance_->InitAsDefaultInstance();
  QueryAgentStatusReply::default_instance_->InitAsDefaultInstance();
  SwitchCell::default_instance_->InitAsDefaultInstance();
  SwitchHotbakRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_admin_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_admin_5fprotocol_2eproto {
  StaticDescriptorInitializer_admin_5fprotocol_2eproto() {
    protobuf_AddDesc_admin_5fprotocol_2eproto();
  }
} static_descriptor_initializer_admin_5fprotocol_2eproto_;


// ===================================================================

const ::std::string AddCacheServerRequest::_default_name_;
const ::std::string AddCacheServerRequest::_default_addr_;
const ::std::string AddCacheServerRequest::_default_hotbak_addr_;
#ifndef _MSC_VER
const int AddCacheServerRequest::kModuleFieldNumber;
const int AddCacheServerRequest::kInstanceidFieldNumber;
const int AddCacheServerRequest::kNameFieldNumber;
const int AddCacheServerRequest::kAddrFieldNumber;
const int AddCacheServerRequest::kVirtualNodeFieldNumber;
const int AddCacheServerRequest::kHotbakAddrFieldNumber;
#endif  // !_MSC_VER

AddCacheServerRequest::AddCacheServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCacheServerRequest::InitAsDefaultInstance() {
}

AddCacheServerRequest::AddCacheServerRequest(const AddCacheServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCacheServerRequest::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  instanceid_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  virtual_node_ = -1;
  hotbak_addr_ = const_cast< ::std::string*>(&_default_hotbak_addr_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCacheServerRequest::~AddCacheServerRequest() {
  SharedDtor();
}

void AddCacheServerRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (hotbak_addr_ != &_default_hotbak_addr_) {
    delete hotbak_addr_;
  }
  if (this != default_instance_) {
  }
}

void AddCacheServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCacheServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCacheServerRequest_descriptor_;
}

const AddCacheServerRequest& AddCacheServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

AddCacheServerRequest* AddCacheServerRequest::default_instance_ = NULL;

AddCacheServerRequest* AddCacheServerRequest::New() const {
  return new AddCacheServerRequest;
}

void AddCacheServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
    instanceid_ = 0;
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    virtual_node_ = -1;
    if (_has_bit(5)) {
      if (hotbak_addr_ != &_default_hotbak_addr_) {
        hotbak_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCacheServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceid;
        break;
      }
      
      // required int32 instanceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addr;
        break;
      }
      
      // required string addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_virtual_node;
        break;
      }
      
      // optional int32 virtual_node = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtual_node_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hotbak_addr;
        break;
      }
      
      // required string hotbak_addr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotbak_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotbak_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotbak_addr().data(), this->hotbak_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCacheServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module(), output);
  }
  
  // required int32 instanceid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required string addr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->addr(), output);
  }
  
  // optional int32 virtual_node = 5 [default = -1];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->virtual_node(), output);
  }
  
  // required string hotbak_addr = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotbak_addr().data(), this->hotbak_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hotbak_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCacheServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->module(), target);
  }
  
  // required int32 instanceid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required string addr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }
  
  // optional int32 virtual_node = 5 [default = -1];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->virtual_node(), target);
  }
  
  // required string hotbak_addr = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotbak_addr().data(), this->hotbak_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hotbak_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCacheServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module());
    }
    
    // required int32 instanceid = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string addr = 4;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // optional int32 virtual_node = 5 [default = -1];
    if (has_virtual_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtual_node());
    }
    
    // required string hotbak_addr = 6;
    if (has_hotbak_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotbak_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCacheServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCacheServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCacheServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCacheServerRequest::MergeFrom(const AddCacheServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_module(from.module());
    }
    if (from._has_bit(1)) {
      set_instanceid(from.instanceid());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_addr(from.addr());
    }
    if (from._has_bit(4)) {
      set_virtual_node(from.virtual_node());
    }
    if (from._has_bit(5)) {
      set_hotbak_addr(from.hotbak_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCacheServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCacheServerRequest::CopyFrom(const AddCacheServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCacheServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002f) != 0x0000002f) return false;
  
  return true;
}

void AddCacheServerRequest::Swap(AddCacheServerRequest* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(name_, other->name_);
    std::swap(addr_, other->addr_);
    std::swap(virtual_node_, other->virtual_node_);
    std::swap(hotbak_addr_, other->hotbak_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCacheServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCacheServerRequest_descriptor_;
  metadata.reflection = AddCacheServerRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string AddModuleRequest::_default_addr_;
const ::std::string AddModuleRequest::_default_accesstoken_;
#ifndef _MSC_VER
const int AddModuleRequest::kModuleFieldNumber;
const int AddModuleRequest::kAddrFieldNumber;
const int AddModuleRequest::kAccesstokenFieldNumber;
#endif  // !_MSC_VER

AddModuleRequest::AddModuleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddModuleRequest::InitAsDefaultInstance() {
}

AddModuleRequest::AddModuleRequest(const AddModuleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddModuleRequest::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  accesstoken_ = const_cast< ::std::string*>(&_default_accesstoken_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddModuleRequest::~AddModuleRequest() {
  SharedDtor();
}

void AddModuleRequest::SharedDtor() {
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (accesstoken_ != &_default_accesstoken_) {
    delete accesstoken_;
  }
  if (this != default_instance_) {
  }
}

void AddModuleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddModuleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddModuleRequest_descriptor_;
}

const AddModuleRequest& AddModuleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

AddModuleRequest* AddModuleRequest::default_instance_ = NULL;

AddModuleRequest* AddModuleRequest::New() const {
  return new AddModuleRequest;
}

void AddModuleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
    if (_has_bit(1)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    if (_has_bit(2)) {
      if (accesstoken_ != &_default_accesstoken_) {
        accesstoken_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddModuleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addr;
        break;
      }
      
      // required string addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accesstoken;
        break;
      }
      
      // required string accesstoken = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accesstoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesstoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accesstoken().data(), this->accesstoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddModuleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module(), output);
  }
  
  // required string addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addr(), output);
  }
  
  // required string accesstoken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accesstoken(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddModuleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->module(), target);
  }
  
  // required string addr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }
  
  // required string accesstoken = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesstoken().data(), this->accesstoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accesstoken(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddModuleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module());
    }
    
    // required string addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // required string accesstoken = 3;
    if (has_accesstoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesstoken());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddModuleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddModuleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddModuleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddModuleRequest::MergeFrom(const AddModuleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_module(from.module());
    }
    if (from._has_bit(1)) {
      set_addr(from.addr());
    }
    if (from._has_bit(2)) {
      set_accesstoken(from.accesstoken());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddModuleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddModuleRequest::CopyFrom(const AddModuleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddModuleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AddModuleRequest::Swap(AddModuleRequest* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(addr_, other->addr_);
    std::swap(accesstoken_, other->accesstoken_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddModuleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddModuleRequest_descriptor_;
  metadata.reflection = AddModuleRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ChangeCacheServerAddrRequest::_default_name_;
const ::std::string ChangeCacheServerAddrRequest::_default_addr_;
const ::std::string ChangeCacheServerAddrRequest::_default_hotbak_addr_;
#ifndef _MSC_VER
const int ChangeCacheServerAddrRequest::kModuleFieldNumber;
const int ChangeCacheServerAddrRequest::kNameFieldNumber;
const int ChangeCacheServerAddrRequest::kAddrFieldNumber;
const int ChangeCacheServerAddrRequest::kHotbakAddrFieldNumber;
#endif  // !_MSC_VER

ChangeCacheServerAddrRequest::ChangeCacheServerAddrRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeCacheServerAddrRequest::InitAsDefaultInstance() {
}

ChangeCacheServerAddrRequest::ChangeCacheServerAddrRequest(const ChangeCacheServerAddrRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeCacheServerAddrRequest::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  addr_ = const_cast< ::std::string*>(&_default_addr_);
  hotbak_addr_ = const_cast< ::std::string*>(&_default_hotbak_addr_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeCacheServerAddrRequest::~ChangeCacheServerAddrRequest() {
  SharedDtor();
}

void ChangeCacheServerAddrRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (addr_ != &_default_addr_) {
    delete addr_;
  }
  if (hotbak_addr_ != &_default_hotbak_addr_) {
    delete hotbak_addr_;
  }
  if (this != default_instance_) {
  }
}

void ChangeCacheServerAddrRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeCacheServerAddrRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeCacheServerAddrRequest_descriptor_;
}

const ChangeCacheServerAddrRequest& ChangeCacheServerAddrRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

ChangeCacheServerAddrRequest* ChangeCacheServerAddrRequest::default_instance_ = NULL;

ChangeCacheServerAddrRequest* ChangeCacheServerAddrRequest::New() const {
  return new ChangeCacheServerAddrRequest;
}

void ChangeCacheServerAddrRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (addr_ != &_default_addr_) {
        addr_->clear();
      }
    }
    if (_has_bit(3)) {
      if (hotbak_addr_ != &_default_hotbak_addr_) {
        hotbak_addr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeCacheServerAddrRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }
      
      // required string addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hotbak_addr;
        break;
      }
      
      // required string hotbak_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotbak_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotbak_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotbak_addr().data(), this->hotbak_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeCacheServerAddrRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required string addr = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->addr(), output);
  }
  
  // required string hotbak_addr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotbak_addr().data(), this->hotbak_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hotbak_addr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeCacheServerAddrRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->module(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required string addr = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }
  
  // required string hotbak_addr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotbak_addr().data(), this->hotbak_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hotbak_addr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeCacheServerAddrRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string addr = 3;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // required string hotbak_addr = 4;
    if (has_hotbak_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotbak_addr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeCacheServerAddrRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeCacheServerAddrRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeCacheServerAddrRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeCacheServerAddrRequest::MergeFrom(const ChangeCacheServerAddrRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_module(from.module());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_addr(from.addr());
    }
    if (from._has_bit(3)) {
      set_hotbak_addr(from.hotbak_addr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeCacheServerAddrRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeCacheServerAddrRequest::CopyFrom(const ChangeCacheServerAddrRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCacheServerAddrRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ChangeCacheServerAddrRequest::Swap(ChangeCacheServerAddrRequest* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(name_, other->name_);
    std::swap(addr_, other->addr_);
    std::swap(hotbak_addr_, other->hotbak_addr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeCacheServerAddrRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeCacheServerAddrRequest_descriptor_;
  metadata.reflection = ChangeCacheServerAddrRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RemoveCacheServerRequest::_default_name_;
#ifndef _MSC_VER
const int RemoveCacheServerRequest::kModuleFieldNumber;
const int RemoveCacheServerRequest::kNameFieldNumber;
const int RemoveCacheServerRequest::kVirtualNodeFieldNumber;
#endif  // !_MSC_VER

RemoveCacheServerRequest::RemoveCacheServerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveCacheServerRequest::InitAsDefaultInstance() {
}

RemoveCacheServerRequest::RemoveCacheServerRequest(const RemoveCacheServerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveCacheServerRequest::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  virtual_node_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveCacheServerRequest::~RemoveCacheServerRequest() {
  SharedDtor();
}

void RemoveCacheServerRequest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RemoveCacheServerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCacheServerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveCacheServerRequest_descriptor_;
}

const RemoveCacheServerRequest& RemoveCacheServerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

RemoveCacheServerRequest* RemoveCacheServerRequest::default_instance_ = NULL;

RemoveCacheServerRequest* RemoveCacheServerRequest::New() const {
  return new RemoveCacheServerRequest;
}

void RemoveCacheServerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    virtual_node_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveCacheServerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_virtual_node;
        break;
      }
      
      // optional int32 virtual_node = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_virtual_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtual_node_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveCacheServerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 virtual_node = 3 [default = -1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->virtual_node(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveCacheServerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->module(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 virtual_node = 3 [default = -1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->virtual_node(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveCacheServerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 virtual_node = 3 [default = -1];
    if (has_virtual_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtual_node());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCacheServerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveCacheServerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveCacheServerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveCacheServerRequest::MergeFrom(const RemoveCacheServerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_module(from.module());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_virtual_node(from.virtual_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveCacheServerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCacheServerRequest::CopyFrom(const RemoveCacheServerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCacheServerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RemoveCacheServerRequest::Swap(RemoveCacheServerRequest* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(name_, other->name_);
    std::swap(virtual_node_, other->virtual_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveCacheServerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveCacheServerRequest_descriptor_;
  metadata.reflection = RemoveCacheServerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveModuleRequest::kModuleFieldNumber;
#endif  // !_MSC_VER

RemoveModuleRequest::RemoveModuleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveModuleRequest::InitAsDefaultInstance() {
}

RemoveModuleRequest::RemoveModuleRequest(const RemoveModuleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveModuleRequest::SharedCtor() {
  _cached_size_ = 0;
  module_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveModuleRequest::~RemoveModuleRequest() {
  SharedDtor();
}

void RemoveModuleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveModuleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveModuleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveModuleRequest_descriptor_;
}

const RemoveModuleRequest& RemoveModuleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

RemoveModuleRequest* RemoveModuleRequest::default_instance_ = NULL;

RemoveModuleRequest* RemoveModuleRequest::New() const {
  return new RemoveModuleRequest;
}

void RemoveModuleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    module_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveModuleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 module = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveModuleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->module(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveModuleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 module = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->module(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveModuleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveModuleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveModuleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveModuleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveModuleRequest::MergeFrom(const RemoveModuleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_module(from.module());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveModuleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveModuleRequest::CopyFrom(const RemoveModuleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveModuleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RemoveModuleRequest::Swap(RemoveModuleRequest* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveModuleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveModuleRequest_descriptor_;
  metadata.reflection = RemoveModuleRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ReloadConfigRequest::_default_config_;
#ifndef _MSC_VER
const int ReloadConfigRequest::kConfigFieldNumber;
#endif  // !_MSC_VER

ReloadConfigRequest::ReloadConfigRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReloadConfigRequest::InitAsDefaultInstance() {
}

ReloadConfigRequest::ReloadConfigRequest(const ReloadConfigRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReloadConfigRequest::SharedCtor() {
  _cached_size_ = 0;
  config_ = const_cast< ::std::string*>(&_default_config_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReloadConfigRequest::~ReloadConfigRequest() {
  SharedDtor();
}

void ReloadConfigRequest::SharedDtor() {
  if (config_ != &_default_config_) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void ReloadConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReloadConfigRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReloadConfigRequest_descriptor_;
}

const ReloadConfigRequest& ReloadConfigRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

ReloadConfigRequest* ReloadConfigRequest::default_instance_ = NULL;

ReloadConfigRequest* ReloadConfigRequest::New() const {
  return new ReloadConfigRequest;
}

void ReloadConfigRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (config_ != &_default_config_) {
        config_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReloadConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string config = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReloadConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string config = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->config(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReloadConfigRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string config = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReloadConfigRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string config = 1;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReloadConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReloadConfigRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReloadConfigRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReloadConfigRequest::MergeFrom(const ReloadConfigRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_config(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReloadConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReloadConfigRequest::CopyFrom(const ReloadConfigRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReloadConfigRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReloadConfigRequest::Swap(ReloadConfigRequest* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReloadConfigRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReloadConfigRequest_descriptor_;
  metadata.reflection = ReloadConfigRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Reply::_default_msg_;
#ifndef _MSC_VER
const int Reply::kStatusFieldNumber;
const int Reply::kMsgFieldNumber;
#endif  // !_MSC_VER

Reply::Reply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Reply::InitAsDefaultInstance() {
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Reply::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reply::~Reply() {
  SharedDtor();
}

void Reply::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New() const {
  return new Reply;
}

void Reply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (_has_bit(1)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // required string msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Reply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // required string msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Reply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_status(from.status());
    }
    if (from._has_bit(1)) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Reply::Swap(Reply* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HeartBeat::_default_version_;
const ::std::string HeartBeat::_default_configure_md5_;
#ifndef _MSC_VER
const int HeartBeat::kVersionFieldNumber;
const int HeartBeat::kConfigureVersionFieldNumber;
const int HeartBeat::kConfigureMd5FieldNumber;
const int HeartBeat::kAgentIdFieldNumber;
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&_default_version_);
  configure_version_ = 0;
  configure_md5_ = const_cast< ::std::string*>(&_default_configure_md5_);
  agent_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (version_ != &_default_version_) {
    delete version_;
  }
  if (configure_md5_ != &_default_configure_md5_) {
    delete configure_md5_;
  }
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New() const {
  return new HeartBeat;
}

void HeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (version_ != &_default_version_) {
        version_->clear();
      }
    }
    configure_version_ = 0;
    if (_has_bit(2)) {
      if (configure_md5_ != &_default_configure_md5_) {
        configure_md5_->clear();
      }
    }
    agent_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_configure_version;
        break;
      }
      
      // required int32 configure_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_configure_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configure_version_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configure_md5;
        break;
      }
      
      // required string configure_md5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configure_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configure_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configure_md5().data(), this->configure_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_agent_id;
        break;
      }
      
      // required int32 agent_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agent_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agent_id_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // required int32 configure_version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->configure_version(), output);
  }
  
  // required string configure_md5 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure_md5().data(), this->configure_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->configure_md5(), output);
  }
  
  // required int32 agent_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->agent_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // required int32 configure_version = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->configure_version(), target);
  }
  
  // required string configure_md5 = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure_md5().data(), this->configure_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->configure_md5(), target);
  }
  
  // required int32 agent_id = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->agent_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required int32 configure_version = 2;
    if (has_configure_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configure_version());
    }
    
    // required string configure_md5 = 3;
    if (has_configure_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configure_md5());
    }
    
    // required int32 agent_id = 4;
    if (has_agent_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agent_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_configure_version(from.configure_version());
    }
    if (from._has_bit(2)) {
      set_configure_md5(from.configure_md5());
    }
    if (from._has_bit(3)) {
      set_agent_id(from.agent_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(configure_version_, other->configure_version_);
    std::swap(configure_md5_, other->configure_md5_);
    std::swap(agent_id_, other->agent_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HeartBeatReply::_default_latest_configure_md5_;
#ifndef _MSC_VER
const int HeartBeatReply::kLatestConfigureVersionFieldNumber;
const int HeartBeatReply::kLatestConfigureMd5FieldNumber;
const int HeartBeatReply::kPushFieldNumber;
#endif  // !_MSC_VER

HeartBeatReply::HeartBeatReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatReply::InitAsDefaultInstance() {
}

HeartBeatReply::HeartBeatReply(const HeartBeatReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatReply::SharedCtor() {
  _cached_size_ = 0;
  latest_configure_version_ = 0;
  latest_configure_md5_ = const_cast< ::std::string*>(&_default_latest_configure_md5_);
  push_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatReply::~HeartBeatReply() {
  SharedDtor();
}

void HeartBeatReply::SharedDtor() {
  if (latest_configure_md5_ != &_default_latest_configure_md5_) {
    delete latest_configure_md5_;
  }
  if (this != default_instance_) {
  }
}

void HeartBeatReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatReply_descriptor_;
}

const HeartBeatReply& HeartBeatReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

HeartBeatReply* HeartBeatReply::default_instance_ = NULL;

HeartBeatReply* HeartBeatReply::New() const {
  return new HeartBeatReply;
}

void HeartBeatReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latest_configure_version_ = 0;
    if (_has_bit(1)) {
      if (latest_configure_md5_ != &_default_latest_configure_md5_) {
        latest_configure_md5_->clear();
      }
    }
    push_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 latest_configure_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latest_configure_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_latest_configure_md5;
        break;
      }
      
      // required string latest_configure_md5 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_configure_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_configure_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->latest_configure_md5().data(), this->latest_configure_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_push;
        break;
      }
      
      // optional bool push = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_push:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeartBeatReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 latest_configure_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->latest_configure_version(), output);
  }
  
  // required string latest_configure_md5 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_configure_md5().data(), this->latest_configure_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->latest_configure_md5(), output);
  }
  
  // optional bool push = 3 [default = false];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->push(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 latest_configure_version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->latest_configure_version(), target);
  }
  
  // required string latest_configure_md5 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->latest_configure_md5().data(), this->latest_configure_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->latest_configure_md5(), target);
  }
  
  // optional bool push = 3 [default = false];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->push(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 latest_configure_version = 1;
    if (has_latest_configure_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latest_configure_version());
    }
    
    // required string latest_configure_md5 = 2;
    if (has_latest_configure_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_configure_md5());
    }
    
    // optional bool push = 3 [default = false];
    if (has_push()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatReply::MergeFrom(const HeartBeatReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_latest_configure_version(from.latest_configure_version());
    }
    if (from._has_bit(1)) {
      set_latest_configure_md5(from.latest_configure_md5());
    }
    if (from._has_bit(2)) {
      set_push(from.push());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatReply::CopyFrom(const HeartBeatReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HeartBeatReply::Swap(HeartBeatReply* other) {
  if (other != this) {
    std::swap(latest_configure_version_, other->latest_configure_version_);
    std::swap(latest_configure_md5_, other->latest_configure_md5_);
    std::swap(push_, other->push_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatReply_descriptor_;
  metadata.reflection = HeartBeatReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLatestConfigure::kConfigureVersionFieldNumber;
#endif  // !_MSC_VER

GetLatestConfigure::GetLatestConfigure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLatestConfigure::InitAsDefaultInstance() {
}

GetLatestConfigure::GetLatestConfigure(const GetLatestConfigure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLatestConfigure::SharedCtor() {
  _cached_size_ = 0;
  configure_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLatestConfigure::~GetLatestConfigure() {
  SharedDtor();
}

void GetLatestConfigure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLatestConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLatestConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLatestConfigure_descriptor_;
}

const GetLatestConfigure& GetLatestConfigure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

GetLatestConfigure* GetLatestConfigure::default_instance_ = NULL;

GetLatestConfigure* GetLatestConfigure::New() const {
  return new GetLatestConfigure;
}

void GetLatestConfigure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configure_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLatestConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 configure_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configure_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLatestConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 configure_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configure_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLatestConfigure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 configure_version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configure_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLatestConfigure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 configure_version = 1;
    if (has_configure_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configure_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLatestConfigure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLatestConfigure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLatestConfigure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLatestConfigure::MergeFrom(const GetLatestConfigure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_configure_version(from.configure_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLatestConfigure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestConfigure::CopyFrom(const GetLatestConfigure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestConfigure::IsInitialized() const {
  
  return true;
}

void GetLatestConfigure::Swap(GetLatestConfigure* other) {
  if (other != this) {
    std::swap(configure_version_, other->configure_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLatestConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLatestConfigure_descriptor_;
  metadata.reflection = GetLatestConfigure_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string LatestConfigureReply::_default_configure_;
#ifndef _MSC_VER
const int LatestConfigureReply::kConfigureVersionFieldNumber;
const int LatestConfigureReply::kConfigureFieldNumber;
#endif  // !_MSC_VER

LatestConfigureReply::LatestConfigureReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LatestConfigureReply::InitAsDefaultInstance() {
}

LatestConfigureReply::LatestConfigureReply(const LatestConfigureReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LatestConfigureReply::SharedCtor() {
  _cached_size_ = 0;
  configure_version_ = 0;
  configure_ = const_cast< ::std::string*>(&_default_configure_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatestConfigureReply::~LatestConfigureReply() {
  SharedDtor();
}

void LatestConfigureReply::SharedDtor() {
  if (configure_ != &_default_configure_) {
    delete configure_;
  }
  if (this != default_instance_) {
  }
}

void LatestConfigureReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatestConfigureReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatestConfigureReply_descriptor_;
}

const LatestConfigureReply& LatestConfigureReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

LatestConfigureReply* LatestConfigureReply::default_instance_ = NULL;

LatestConfigureReply* LatestConfigureReply::New() const {
  return new LatestConfigureReply;
}

void LatestConfigureReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    configure_version_ = 0;
    if (_has_bit(1)) {
      if (configure_ != &_default_configure_) {
        configure_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LatestConfigureReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 configure_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &configure_version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configure;
        break;
      }
      
      // required string configure = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configure().data(), this->configure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LatestConfigureReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 configure_version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->configure_version(), output);
  }
  
  // required string configure = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure().data(), this->configure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->configure(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LatestConfigureReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 configure_version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->configure_version(), target);
  }
  
  // required string configure = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure().data(), this->configure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->configure(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LatestConfigureReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 configure_version = 1;
    if (has_configure_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->configure_version());
    }
    
    // required string configure = 2;
    if (has_configure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configure());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatestConfigureReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LatestConfigureReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LatestConfigureReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LatestConfigureReply::MergeFrom(const LatestConfigureReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_configure_version(from.configure_version());
    }
    if (from._has_bit(1)) {
      set_configure(from.configure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LatestConfigureReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatestConfigureReply::CopyFrom(const LatestConfigureReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatestConfigureReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void LatestConfigureReply::Swap(LatestConfigureReply* other) {
  if (other != this) {
    std::swap(configure_version_, other->configure_version_);
    std::swap(configure_, other->configure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LatestConfigureReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatestConfigureReply_descriptor_;
  metadata.reflection = LatestConfigureReply_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string UpdateConfigure::_default_configure_cksum_;
const ::std::string UpdateConfigure::_default_configure_;
#ifndef _MSC_VER
const int UpdateConfigure::kVersionFieldNumber;
const int UpdateConfigure::kConfigureCksumFieldNumber;
const int UpdateConfigure::kConfigureFieldNumber;
#endif  // !_MSC_VER

UpdateConfigure::UpdateConfigure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateConfigure::InitAsDefaultInstance() {
}

UpdateConfigure::UpdateConfigure(const UpdateConfigure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateConfigure::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  configure_cksum_ = const_cast< ::std::string*>(&_default_configure_cksum_);
  configure_ = const_cast< ::std::string*>(&_default_configure_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateConfigure::~UpdateConfigure() {
  SharedDtor();
}

void UpdateConfigure::SharedDtor() {
  if (configure_cksum_ != &_default_configure_cksum_) {
    delete configure_cksum_;
  }
  if (configure_ != &_default_configure_) {
    delete configure_;
  }
  if (this != default_instance_) {
  }
}

void UpdateConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateConfigure_descriptor_;
}

const UpdateConfigure& UpdateConfigure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

UpdateConfigure* UpdateConfigure::default_instance_ = NULL;

UpdateConfigure* UpdateConfigure::New() const {
  return new UpdateConfigure;
}

void UpdateConfigure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
    if (_has_bit(1)) {
      if (configure_cksum_ != &_default_configure_cksum_) {
        configure_cksum_->clear();
      }
    }
    if (_has_bit(2)) {
      if (configure_ != &_default_configure_) {
        configure_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_configure_cksum;
        break;
      }
      
      // required string configure_cksum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configure_cksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configure_cksum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configure_cksum().data(), this->configure_cksum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configure;
        break;
      }
      
      // required string configure = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->configure().data(), this->configure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 version = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  // required string configure_cksum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure_cksum().data(), this->configure_cksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->configure_cksum(), output);
  }
  
  // required string configure = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure().data(), this->configure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->configure(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateConfigure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 version = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  // required string configure_cksum = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure_cksum().data(), this->configure_cksum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->configure_cksum(), target);
  }
  
  // required string configure = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->configure().data(), this->configure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->configure(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateConfigure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // required string configure_cksum = 2;
    if (has_configure_cksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configure_cksum());
    }
    
    // required string configure = 3;
    if (has_configure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->configure());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConfigure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateConfigure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateConfigure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateConfigure::MergeFrom(const UpdateConfigure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_version(from.version());
    }
    if (from._has_bit(1)) {
      set_configure_cksum(from.configure_cksum());
    }
    if (from._has_bit(2)) {
      set_configure(from.configure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateConfigure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigure::CopyFrom(const UpdateConfigure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigure::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UpdateConfigure::Swap(UpdateConfigure* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(configure_cksum_, other->configure_cksum_);
    std::swap(configure_, other->configure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateConfigure_descriptor_;
  metadata.reflection = UpdateConfigure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateConfigureReply::kOkFieldNumber;
#endif  // !_MSC_VER

UpdateConfigureReply::UpdateConfigureReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateConfigureReply::InitAsDefaultInstance() {
}

UpdateConfigureReply::UpdateConfigureReply(const UpdateConfigureReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateConfigureReply::SharedCtor() {
  _cached_size_ = 0;
  ok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateConfigureReply::~UpdateConfigureReply() {
  SharedDtor();
}

void UpdateConfigureReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateConfigureReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateConfigureReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateConfigureReply_descriptor_;
}

const UpdateConfigureReply& UpdateConfigureReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

UpdateConfigureReply* UpdateConfigureReply::default_instance_ = NULL;

UpdateConfigureReply* UpdateConfigureReply::New() const {
  return new UpdateConfigureReply;
}

void UpdateConfigureReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ok_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateConfigureReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateConfigureReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ok = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateConfigureReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ok = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateConfigureReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ok = 1;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ok());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateConfigureReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateConfigureReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateConfigureReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateConfigureReply::MergeFrom(const UpdateConfigureReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateConfigureReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateConfigureReply::CopyFrom(const UpdateConfigureReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateConfigureReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UpdateConfigureReply::Swap(UpdateConfigureReply* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateConfigureReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateConfigureReply_descriptor_;
  metadata.reflection = UpdateConfigureReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPush::kPushFieldNumber;
#endif  // !_MSC_VER

SetPush::SetPush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPush::InitAsDefaultInstance() {
}

SetPush::SetPush(const SetPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPush::SharedCtor() {
  _cached_size_ = 0;
  push_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPush::~SetPush() {
  SharedDtor();
}

void SetPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPush_descriptor_;
}

const SetPush& SetPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

SetPush* SetPush::default_instance_ = NULL;

SetPush* SetPush::New() const {
  return new SetPush;
}

void SetPush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    push_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 push = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &push_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 push = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->push(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 push = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->push(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPush::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 push = 1;
    if (has_push()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->push());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPush::MergeFrom(const SetPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_push(from.push());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPush::CopyFrom(const SetPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetPush::Swap(SetPush* other) {
  if (other != this) {
    std::swap(push_, other->push_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPush_descriptor_;
  metadata.reflection = SetPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPushReply::kOkFieldNumber;
#endif  // !_MSC_VER

SetPushReply::SetPushReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPushReply::InitAsDefaultInstance() {
}

SetPushReply::SetPushReply(const SetPushReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPushReply::SharedCtor() {
  _cached_size_ = 0;
  ok_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPushReply::~SetPushReply() {
  SharedDtor();
}

void SetPushReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPushReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPushReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPushReply_descriptor_;
}

const SetPushReply& SetPushReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

SetPushReply* SetPushReply::default_instance_ = NULL;

SetPushReply* SetPushReply::New() const {
  return new SetPushReply;
}

void SetPushReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ok_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPushReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ok = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPushReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ok = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ok(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPushReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ok = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ok(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPushReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ok = 1;
    if (has_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ok());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPushReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPushReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPushReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPushReply::MergeFrom(const SetPushReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ok(from.ok());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPushReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPushReply::CopyFrom(const SetPushReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPushReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SetPushReply::Swap(SetPushReply* other) {
  if (other != this) {
    std::swap(ok_, other->ok_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPushReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPushReply_descriptor_;
  metadata.reflection = SetPushReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAgentStatus::kIdFieldNumber;
#endif  // !_MSC_VER

QueryAgentStatus::QueryAgentStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAgentStatus::InitAsDefaultInstance() {
}

QueryAgentStatus::QueryAgentStatus(const QueryAgentStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAgentStatus::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAgentStatus::~QueryAgentStatus() {
  SharedDtor();
}

void QueryAgentStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAgentStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAgentStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAgentStatus_descriptor_;
}

const QueryAgentStatus& QueryAgentStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

QueryAgentStatus* QueryAgentStatus::default_instance_ = NULL;

QueryAgentStatus* QueryAgentStatus::New() const {
  return new QueryAgentStatus;
}

void QueryAgentStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAgentStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAgentStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAgentStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAgentStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAgentStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAgentStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAgentStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAgentStatus::MergeFrom(const QueryAgentStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAgentStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAgentStatus::CopyFrom(const QueryAgentStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAgentStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void QueryAgentStatus::Swap(QueryAgentStatus* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAgentStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAgentStatus_descriptor_;
  metadata.reflection = QueryAgentStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAgentStatusReply::kIdFieldNumber;
const int QueryAgentStatusReply::kDbtimeFieldNumber;
const int QueryAgentStatusReply::kLmtimeFieldNumber;
#endif  // !_MSC_VER

QueryAgentStatusReply::QueryAgentStatusReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryAgentStatusReply::InitAsDefaultInstance() {
}

QueryAgentStatusReply::QueryAgentStatusReply(const QueryAgentStatusReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryAgentStatusReply::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  dbtime_ = 0;
  lmtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAgentStatusReply::~QueryAgentStatusReply() {
  SharedDtor();
}

void QueryAgentStatusReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAgentStatusReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAgentStatusReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAgentStatusReply_descriptor_;
}

const QueryAgentStatusReply& QueryAgentStatusReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

QueryAgentStatusReply* QueryAgentStatusReply::default_instance_ = NULL;

QueryAgentStatusReply* QueryAgentStatusReply::New() const {
  return new QueryAgentStatusReply;
}

void QueryAgentStatusReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    dbtime_ = 0;
    lmtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAgentStatusReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dbtime;
        break;
      }
      
      // required int32 dbtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbtime_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lmtime;
        break;
      }
      
      // required int32 lmtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmtime_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryAgentStatusReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 dbtime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dbtime(), output);
  }
  
  // required int32 lmtime = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lmtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryAgentStatusReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 dbtime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dbtime(), target);
  }
  
  // required int32 lmtime = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lmtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryAgentStatusReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 dbtime = 2;
    if (has_dbtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbtime());
    }
    
    // required int32 lmtime = 3;
    if (has_lmtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAgentStatusReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAgentStatusReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAgentStatusReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAgentStatusReply::MergeFrom(const QueryAgentStatusReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_dbtime(from.dbtime());
    }
    if (from._has_bit(2)) {
      set_lmtime(from.lmtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAgentStatusReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAgentStatusReply::CopyFrom(const QueryAgentStatusReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAgentStatusReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void QueryAgentStatusReply::Swap(QueryAgentStatusReply* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dbtime_, other->dbtime_);
    std::swap(lmtime_, other->lmtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAgentStatusReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAgentStatusReply_descriptor_;
  metadata.reflection = QueryAgentStatusReply_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SwitchCell::_default_name_;
#ifndef _MSC_VER
const int SwitchCell::kBusinessidFieldNumber;
const int SwitchCell::kNameFieldNumber;
#endif  // !_MSC_VER

SwitchCell::SwitchCell()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchCell::InitAsDefaultInstance() {
}

SwitchCell::SwitchCell(const SwitchCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchCell::SharedCtor() {
  _cached_size_ = 0;
  businessid_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchCell::~SwitchCell() {
  SharedDtor();
}

void SwitchCell::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SwitchCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchCell_descriptor_;
}

const SwitchCell& SwitchCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

SwitchCell* SwitchCell::default_instance_ = NULL;

SwitchCell* SwitchCell::New() const {
  return new SwitchCell;
}

void SwitchCell::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    businessid_ = 0;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 businessid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &businessid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 businessid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->businessid(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 businessid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->businessid(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchCell::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 businessid = 1;
    if (has_businessid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->businessid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchCell::MergeFrom(const SwitchCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_businessid(from.businessid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchCell::CopyFrom(const SwitchCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SwitchCell::Swap(SwitchCell* other) {
  if (other != this) {
    std::swap(businessid_, other->businessid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchCell_descriptor_;
  metadata.reflection = SwitchCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SwitchHotbakRequest::kModeFieldNumber;
const int SwitchHotbakRequest::kCountFieldNumber;
const int SwitchHotbakRequest::kDataFieldNumber;
#endif  // !_MSC_VER

SwitchHotbakRequest::SwitchHotbakRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SwitchHotbakRequest::InitAsDefaultInstance() {
}

SwitchHotbakRequest::SwitchHotbakRequest(const SwitchHotbakRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SwitchHotbakRequest::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwitchHotbakRequest::~SwitchHotbakRequest() {
  SharedDtor();
}

void SwitchHotbakRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwitchHotbakRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwitchHotbakRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwitchHotbakRequest_descriptor_;
}

const SwitchHotbakRequest& SwitchHotbakRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_admin_5fprotocol_2eproto();  return *default_instance_;
}

SwitchHotbakRequest* SwitchHotbakRequest::default_instance_ = NULL;

SwitchHotbakRequest* SwitchHotbakRequest::New() const {
  return new SwitchHotbakRequest;
}

void SwitchHotbakRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    count_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SwitchHotbakRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // repeated .ttc.agent.SwitchCell data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SwitchHotbakRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mode = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // required int32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // repeated .ttc.agent.SwitchCell data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SwitchHotbakRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mode = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }
  
  // required int32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // repeated .ttc.agent.SwitchCell data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SwitchHotbakRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
  }
  // repeated .ttc.agent.SwitchCell data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwitchHotbakRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SwitchHotbakRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SwitchHotbakRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SwitchHotbakRequest::MergeFrom(const SwitchHotbakRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_mode(from.mode());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SwitchHotbakRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwitchHotbakRequest::CopyFrom(const SwitchHotbakRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwitchHotbakRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SwitchHotbakRequest::Swap(SwitchHotbakRequest* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(count_, other->count_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SwitchHotbakRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwitchHotbakRequest_descriptor_;
  metadata.reflection = SwitchHotbakRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent
}  // namespace ttc

// @@protoc_insertion_point(global_scope)
